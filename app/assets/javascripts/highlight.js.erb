function showCreateHighlightBtns(mouseupTarget, selectionTarget) {
  // mouseupTarget: jQuery element to detect mouseup event
  mouseupTarget.mouseup(function(evt) {
    // selectionTarget: document element for text selection
    if (!selectionTarget.getSelection().isCollapsed) {
      var selectedText = selectionTarget.getSelection().getRangeAt(0).toString();
      if (showHighlightBtns(evt, mouseupTarget, true)) {
        document.getElementById('highlight-create-btn').onclick =  function() {
          jQuery.ajax({type: 'post', url: '<%= Rails.application.config.relative_url_root %>/courses/ajax_create_snippet/', data:{'description': selectedText}});
          hideHighlightBtns(selectionTarget);
        };
        document.getElementById('highlight-cancel-btn').onclick = function() {
          hideHighlightBtns(selectionTarget);
        };
        return
      };
    };
    hideHighlightBtns (selectionTarget);
  });
};

function showDeleteHighlightBtns(evt, element) {
  var iframeDocument = (document.getElementById('page-frame') != null)
  var positionOrigin = iframeDocument ? $(document.getElementById('page-frame').contentDocument) : $('#simple-html-content');

  if (showHighlightBtns(evt, positionOrigin, false)) {
    var highlightId = element.getAttribute('data-lepo').slice('highlight-'.length);
    document.getElementById('highlight-delete-btn').onclick =  function() {
      jQuery.ajax({type: 'post', url: '<%= Rails.application.config.relative_url_root %>/courses/ajax_destroy_snippet/', data:{'snippet_id': highlightId}});
      removeElement(highlightId)
      hideHighlightBtns();
    };
    document.getElementById('highlight-cancel-btn').onclick = function() {
      hideHighlightBtns();
    };
    setTimeout(function() {hideHighlightBtns();}, 2000)
  };

  function removeElement(highlightId) {
    var targetDocument = iframeDocument ? document.getElementById('page-frame').contentWindow.document : document;
    elements = targetDocument.querySelectorAll('lepo-highlight[data-lepo="highlight-' + highlightId + '"]');
    for (var i = 0; i < elements.length; i++) {
      if (elements[i].firstChild == null) {
        $(elements[i]).remove();
      } else {
        $(elements[i].firstChild).unwrap();
      }
    }
  }
}

function showHighlightBtns(evt, positionOrigin, createBtnDisplay) {
  var btns = document.getElementById('highlight-btns');
  if (btns.style.display == 'inline-flex') {
    return false
  } else {
    document.getElementById('highlight-create-btn').style.display = createBtnDisplay ? 'block' : 'none';
    document.getElementById('highlight-delete-btn').style.display = createBtnDisplay ? 'none' : 'block';
    var btnsPosition = new Object();
    setBtnsPosition()
    btns.style.top = btnsPosition.y + 'px';
    btns.style.left = btnsPosition.x + 'px';
    btns.style.display = 'inline-flex';
    return true
  };

  function setBtnsPosition() {
    // position shift -12 and -16: adjusting position empirically
    btnsPosition.x = evt.pageX - 12;
    btnsPosition.y = evt.pageY - 16;

    // position shift with offset: adjusting position for cover and assignment page
    var off = positionOrigin.offset();
    if (off != null ) {
      btnsPosition.x -= off.left;
      btnsPosition.y -= off.top;
    }
  }
}

function hideHighlightBtns (selectionTarget) {
  document.getElementById('highlight-btns').style.display = 'none';

  if ((selectionTarget != null) && !selectionTarget.getSelection().isCollapsed) {
    selectionTarget.getSelection().removeAllRanges();
  }
}

function showHighlight(targetDocument, targetClass, highlightId, highlightText) {
  var documentText = '';   // Full text of target document
  var textNodes = [];  // Array to store text nodes
  var textAccumLengths = [];   // Array to store accumulate character lengths for text node

  setDocumentText();
  searchHighlightText(documentText, 0);

  function setDocumentText(){
    documentText = '';
    textNodes = [];
    textAccumLengths = [];
    if (targetClass === '') {
      // For HTML
      var walker = targetDocument.createTreeWalker(targetDocument.body, NodeFilter.SHOW_ALL, null, false);
    } else {
      // For PDF with PDFjs viewer
      var walker = targetDocument.createTreeWalker(targetDocument.getElementsByClassName(targetClass)[0], NodeFilter.SHOW_ALL, null, false);
    }
    searchTextNode(walker);

    function searchTextNode(walker) {
      if (walker.firstChild()) {
        do {
          var node = walker.currentNode;
          // For element node: Recursive call for searchTextNode
          if (node.nodeType === node.ELEMENT_NODE) {
            searchTextNode(walker);
          }
          // For text node: store the element info
          else if (node.nodeType === node.TEXT_NODE) {
            var text = node.nodeValue;
            if (text) {
              documentText += text;
              textNodes.push(node);
              textAccumLengths.push(documentText.length);
            }
          }
        } while(walker.nextSibling());
        walker.parentNode();
      }
    }
  }

  function searchHighlightText(checkText, trim){
    var startNode;
    var startOffset;
    var endNode;
    var endOffset;

    var index = checkText.indexOf(highlightText);
    // When highlightText is found in checkText
    if (index >= 0){
      var textIndex =  trim + index;

      // Find the start node and offset of the highlight text
      for (var i = 0; i < textAccumLengths.length; i++){
        if (textAccumLengths[i] > textIndex){
          // Highlight text begins at textNodes[i]
          startNode = textNodes[i];
          if (i === 0){
            startOffset = textIndex;
          } else {
            startOffset = textIndex - textAccumLengths[i-1];
          }
          break;
        }
      }

      // Find the end node and offset of the highlight text
      for(var i = 0; i < textAccumLengths.length; i++){
        if(textAccumLengths[i] >= textIndex + highlightText.length){
          endNode = textNodes[i];
          if(i === 0){
            endOffset = textIndex + highlightText.length;
          }else{
            endOffset = textIndex + highlightText.length - textAccumLengths[i-1];
          }
          break;
        }
      }

      setHighlight();
      // To update textNodes and textAccumLengths (The arrays change after inserting lepo-highlight element).
      setDocumentText();
      searchHighlightText(checkText.slice(index + highlightText.length), textIndex + highlightText.length);
    }

    function setHighlight(){
      // Create range object for highlight
      var range = targetDocument.createRange();
      range.setStart(startNode, startOffset);
      range.setEnd(endNode, endOffset);

      // Divide the text node into two at the start point of range
      range.startContainer.splitText(range.startOffset);
      // Make the start point of range outside the text node
      range.setStartAfter(range.startContainer);

      if(range.endContainer.length!==range.endOffset){
        // Divide the text node into two at the end point of Range
        range.endContainer.splitText(range.endOffset);
      }
      // Make the end point of range outside the text node
      range.setEndAfter(range.endContainer);

      var currentNode = targetDocument.body;
      var currentRange= targetDocument.createRange();
      while(currentNode){
        // Set the currentRange to the position surrounding the current node
        currentRange.selectNode(currentNode);

        /*
        compareBoundaryPoints: Compare the positions of the two ranges
        Range.END_TO_START: Compare the end point of range with the start point of currentRange
        Range.START_TO_END:  Compare the start point of range with the end point of currentRange
        Range.START_TO_START: Compare start points
        range.END_TO_END: Compare end points
        If currentRange is before range, it returns -1, 0 if same position, 1 if it is after
        */
        if (currentRange.compareBoundaryPoints(Range.END_TO_START,range) >= 0){
          // When current node is located outside Range
          break;
        }
        if (currentRange.compareBoundaryPoints(Range.START_TO_END,range) <= 0){
          // When current node is located before Range
          nextSibling();
          continue;
        }
        if (currentRange.compareBoundaryPoints(Range.START_TO_START,range) >= 0 &&
        currentRange.compareBoundaryPoints(Range.END_TO_END,range) <= 0){
          // When current node is included in Range
          insertElement(currentNode);
          nextSibling();
          continue;
        }
        if (currentNode.firstChild){
          // When there is a child node, make it a current node
          currentNode = currentNode.firstChild;
        } else {
          nextSibling();
        }
      }

      function insertElement(node){
        if(node.nodeType == Node.TEXT_NODE){
          // insert lepo-highlight tag to highlight text
          var range = targetDocument.createRange();
          range.selectNode(node);
          // Change target node to lepo-highlight element
          node = targetDocument.createElement('lepo-highlight');
          range.surroundContents(node);
          setStyle(node);
        } else if(node.nodeType != Node.COMMENT_NODE){
          var clone  = node.cloneNode(true);
          var newChild = targetDocument.createElement('lepo-highlight');
          for(var i=0;i<clone.childNodes.length;i++){
            newChild.appendChild(clone.childNodes[i]);
          }
          setStyle(newChild);
          // newChild.appendChild(clone);
          while (node.firstChild) node.removeChild(node.firstChild);
          node.appendChild(newChild);
        }
      }

      function setStyle(target){
        target.style.setProperty('background-color', '#fe0', 'important');
        target.style.setProperty('display', 'inline-block', 'important');
        target.setAttribute('data-lepo', 'highlight-' + highlightId);
        target.setAttribute('onmouseover', 'window.parent.showDeleteHighlightBtns(event, this)');
      }

      function nextSibling(){
        do {
          if (currentNode.nextSibling){
            currentNode = currentNode.nextSibling;
            return;
          }
        } while(currentNode = currentNode.parentNode);
        // FIXME: CurrentNode will be null if it reaches the very end
      }
    }
  }
}
